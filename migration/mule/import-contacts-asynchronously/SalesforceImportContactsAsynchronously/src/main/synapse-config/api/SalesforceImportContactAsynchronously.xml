<?xml version="1.0" encoding="UTF-8"?>
<api context="/salesforce" name="SalesforceImportContactAsynchronously" xmlns="http://ws.apache.org/ns/synapse">
    <resource methods="POST" uri-template="/importContactAsynchronously">
        <inSequence>
            <property expression="json-eval($.accessToken)" name="accessToken" scope="default" type="STRING"/>
            <property expression="json-eval($.apiUrl)" name="apiUrl" scope="default" type="STRING"/>
            <property expression="json-eval($.sObjectName)" name="sObjectName" scope="default" type="STRING"/>
            <property expression="json-eval($.refreshToken)" name="refreshToken" scope="default" type="STRING"/>
            <property expression="json-eval($.hostName)" name="hostName" scope="default" type="STRING"/>
            <property expression="json-eval($.apiVersion)" name="apiVersion" scope="default" type="STRING"/>
            <property expression="json-eval($.registryPath)" name="registryPath" scope="default" type="STRING"/>
            <property expression="json-eval($.intervalTime)" name="intervalTime" scope="default" type="STRING"/>
            <property expression="json-eval($.blocking)" name="blocking" scope="default" type="STRING"/>
            <property expression="json-eval($.source)" name="source" scope="default" type="STRING"/>
            <property expression="json-eval($.filePattern)" name="filePattern" scope="default" type="STRING"/>
            <property expression="json-eval($.contentType)" name="contentType" scope="default" type="STRING"/>
            <property expression="json-eval($.contentType)" name="contentType" scope="default" type="STRING"/>
            <property name="conf:/resource/importContactStatus" scope="registry" type="STRING" value="In Progress"/>
            <salesforcerest.init>
                <accessToken>{$ctx:accessToken}</accessToken>
                <apiVersion>{$ctx:apiVersion}</apiVersion>
                <hostName>{$ctx:hostName}</hostName>
                <refreshToken>{$ctx:refreshToken}</refreshToken>
                <apiUrl>{$ctx:apiUrl}</apiUrl>
                <registryPath>{$ctx:registryPath}</registryPath>
                <intervalTime>{$ctx:intervalTime}</intervalTime>
                <blocking>{$ctx:blocking}</blocking>
            </salesforcerest.init>
            <log level="full" separator=","/>
            <fileconnector.read>
                <source>{$ctx:source}</source>
                <contentType>{$ctx:contentType}</contentType>
                <filePattern>{$ctx:filePattern}</filePattern>
            </fileconnector.read>
            <log level="full" separator=","/>
            <datamapper config="gov:datamapper/MapCSV.dmc" inputSchema="gov:datamapper/MapCSV_inputSchema.json" inputType="CSV" outputSchema="gov:datamapper/MapCSV_outputSchema.json" outputType="JSON" xsltStyleSheet="gov:datamapper/MapCSV_xsltStyleSheet.xml"/>
            <log level="full" separator=","/>
            <property expression="json-eval($.fieldAndValue)" name="fieldAndValue" scope="default" type="STRING"/>
            <salesforcerest.createMultipleRecords>
                <sObjectName>{$ctx:sObjectName}</sObjectName>
                <fieldAndValue>{$ctx:fieldAndValue}</fieldAndValue>
            </salesforcerest.createMultipleRecords>
            <script language="js"><![CDATA[java.lang.Thread.sleep(10000);]]></script>
            <property name="conf:/resource/importContactStatus" scope="registry" type="STRING" value="Done"/>
            <send/>
        </inSequence>
        <outSequence/>
        <faultSequence/>
    </resource>
    <resource methods="GET" uri-template="/importContactStatus">
        <inSequence>
            <property expression="get-property('registry', 'conf:/resource/importContactStatus')" name="importContactStatus" scope="default" type="STRING"/>
            <payloadFactory media-type="json">
                <format>
			      	"Import Contact Status" : "$1"
			      </format>
                <args>
                    <arg evaluator="xml" expression="$ctx:importContactStatus"/>
                </args>
            </payloadFactory>
            <respond/>
        </inSequence>
        <outSequence/>
        <faultSequence/>
    </resource>
</api>
